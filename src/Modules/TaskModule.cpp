#include "TaskModule.h"
#include "MobilityModule.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Public
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//System functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////
bool TaskModule::Initialize(ros::NodeHandle *nodeHandlePrivate) {
    int _logLevel;
    if(!nodeHandlePrivate->getParam("taskModuleLogLevel", _logLevel)) {
        ROS_WARN("taskModuleLogLevel not found, using default");
        logLevel = DEFAULT_TASK_MODULE_LOG_LEVEL;
    }
    else {
        switch (_logLevel) {
            case 0:
                logLevel = Debug;
                break;
            case 1:
                logLevel = Info;
                break;
            case 2:
                logLevel = Warn;
                break;
            case 3:
                logLevel = Error;
                break;
            default:
                ROS_WARN("Requested invalid taskModuleLogLevel, using default");
                logLevel = DEFAULT_TASK_MODULE_LOG_LEVEL;
                break;
        }
    }
    state = Awaiting;
    SensorsModule::GetInstance().ChangeStateTo(Calibrating);
    return true;
}

void TaskModule::Update() {
    /*
     * TODO:
     * Maszyna stanów z przejściami
     */
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Task functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void TaskModule::CalibrationCompleted(XnUserID newUserId) {
    DataStorage::GetInstance().SetCurrentUserXnId(newUserId);
    //TODO: zapisz wzorzec
    if(logLevel <= Debug) {
        ROS_DEBUG("Begin following user: %d", newUserId);
    }
    state = Following;
    MobilityModule::GetInstance().SetState(FollowUser);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Private
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//System functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//...


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Task functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//...